// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TreinamentoLinq.Data;

namespace TreinamentoLinq.Data.Migrations
{
    [DbContext(typeof(TreinamentoContext))]
    partial class TreinamentoContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("TreinamentoLinq.Domain.Banco", b =>
                {
                    b.Property<string>("CodigoBanco")
                        .HasColumnName("codigoBanco")
                        .HasColumnType("varchar(3)");

                    b.Property<string>("NomeBanco")
                        .IsRequired()
                        .HasColumnName("nomeBanco")
                        .HasColumnType("varchar(100)");

                    b.HasKey("CodigoBanco")
                        .HasName("pk_banco");

                    b.ToTable("Banco");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.BandeiraCartao", b =>
                {
                    b.Property<int>("IdBandeiraCartao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idBandeiraCartao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeBandeira")
                        .IsRequired()
                        .HasColumnName("nomeBandeira")
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdBandeiraCartao")
                        .HasName("pk_bandeiraCartao");

                    b.ToTable("BandeiraCartao");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idCliente")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("NomeCliente")
                        .IsRequired()
                        .HasColumnName("nomeCliente")
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdCliente")
                        .HasName("pk_cliente");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Cliente");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.ContaFinanceira", b =>
                {
                    b.Property<int>("IdContaFinanceira")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idContaFinanceira")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Agencia")
                        .IsRequired()
                        .HasColumnName("agencia")
                        .HasColumnType("varchar(20)");

                    b.Property<string>("CodigoBanco")
                        .HasColumnName("codigoBanco")
                        .HasColumnType("varchar(3)");

                    b.Property<int>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int");

                    b.Property<bool>("IsContaCaixa")
                        .HasColumnName("isContaCaixa")
                        .HasColumnType("bit");

                    b.Property<string>("NomeContaFinanceira")
                        .IsRequired()
                        .HasColumnName("nomeContaFinanceira")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("NumeroConta")
                        .IsRequired()
                        .HasColumnName("numeroConta")
                        .HasColumnType("varchar(20)");

                    b.HasKey("IdContaFinanceira")
                        .HasName("pk_contaFinanceira");

                    b.HasIndex("CodigoBanco");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("ContaFinanceira");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Empresa", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CNPJ")
                        .IsRequired()
                        .HasColumnName("CNPJ")
                        .HasColumnType("varchar(14)");

                    b.Property<string>("NomeFantasia")
                        .IsRequired()
                        .HasColumnName("nomeFantasia")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("RazaoSocial")
                        .IsRequired()
                        .HasColumnName("razaoSocial")
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdEmpresa")
                        .HasName("pk_empresa");

                    b.ToTable("Empresa");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.MeioPagamento", b =>
                {
                    b.Property<int>("IdMeioPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idMeioPagamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeMeioPagamento")
                        .IsRequired()
                        .HasColumnName("nomeMeioPagamento")
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdMeioPagamento")
                        .HasName("pk_meioPagamento");

                    b.ToTable("MeioPagamento");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.OperadoraCartao", b =>
                {
                    b.Property<int>("IdOperadoraCartao")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idOperadoraCartao")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("NomeOperadoraCartao")
                        .IsRequired()
                        .HasColumnName("nomeOperadoraCartao")
                        .HasColumnType("varchar(100)");

                    b.HasKey("IdOperadoraCartao")
                        .HasName("pk_operadoraCartao");

                    b.ToTable("OperadoraCartao");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Pedido", b =>
                {
                    b.Property<int>("IdPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idPedido")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataPedido")
                        .HasColumnName("dataPedido")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("DataPrimeiroPagamento")
                        .HasColumnName("dataPrimeiroPagamento")
                        .HasColumnType("datetime");

                    b.Property<int>("IdCliente")
                        .HasColumnName("idCliente")
                        .HasColumnType("int");

                    b.Property<int>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int");

                    b.Property<bool>("IsPago")
                        .HasColumnName("isPago")
                        .HasColumnType("bit");

                    b.Property<decimal>("ValorFinalPedido")
                        .HasColumnName("valorFinalPedido")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorPagoMomento")
                        .HasColumnName("valorPagoMomento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotalDesconto")
                        .HasColumnName("valorTotalDesconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorTotalPedido")
                        .HasColumnName("valorTotalPedido")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPedido")
                        .HasName("pk_pedido");

                    b.HasIndex("IdCliente");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Pedido");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.PedidoItem", b =>
                {
                    b.Property<int>("IdItemPedido")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idItemPedido")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdPedido")
                        .HasColumnName("idPedido")
                        .HasColumnType("int");

                    b.Property<int>("IdProduto")
                        .HasColumnName("idProduto")
                        .HasColumnType("int");

                    b.Property<int>("Quantidade")
                        .HasColumnName("quantidade")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorDesconto")
                        .HasColumnName("valorDesconto")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorFinal")
                        .HasColumnName("valorFinal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorUnitario")
                        .HasColumnName("valorUnitario")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdItemPedido")
                        .HasName("pk_pedidoItem");

                    b.HasIndex("IdPedido");

                    b.HasIndex("IdProduto");

                    b.ToTable("PedidoItem");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.PedidoPagamento", b =>
                {
                    b.Property<int>("IdPagamento")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idPagamento")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CodigoPagamento")
                        .IsRequired()
                        .HasColumnName("codigoPagamento")
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("DataPagamento")
                        .HasColumnName("dataPagamento")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("DataPrevistaCredito")
                        .HasColumnName("dataPrevistaCredito")
                        .HasColumnType("datetime");

                    b.Property<int?>("IdBandeira")
                        .HasColumnName("idBandeira")
                        .HasColumnType("int");

                    b.Property<int>("IdContaFinanceira")
                        .HasColumnName("idContaFinanceira")
                        .HasColumnType("int");

                    b.Property<int>("IdMeioPagamento")
                        .HasColumnName("idMeioPagamento")
                        .HasColumnType("int");

                    b.Property<int?>("IdOperadoraCartao")
                        .HasColumnName("idOperadoraCartao")
                        .HasColumnType("int");

                    b.Property<int>("IdPedido")
                        .HasColumnName("idPedido")
                        .HasColumnType("int");

                    b.Property<int>("NumeroParcela")
                        .HasColumnName("numeroParcela")
                        .HasColumnType("int");

                    b.Property<int>("QuantidadeParcela")
                        .HasColumnName("quantidadeParcela")
                        .HasColumnType("int");

                    b.Property<decimal>("ValorDescontoPagamento")
                        .HasColumnName("valorDescontoPagamento")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorJuros")
                        .HasColumnName("valorJuros")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorMulta")
                        .HasColumnName("valorMulta")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorPagamento")
                        .HasColumnName("valorPagamento")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdPagamento")
                        .HasName("pk_pedidoPagamento");

                    b.HasIndex("IdBandeira");

                    b.HasIndex("IdContaFinanceira");

                    b.HasIndex("IdMeioPagamento");

                    b.HasIndex("IdOperadoraCartao");

                    b.HasIndex("IdPedido");

                    b.ToTable("PedidoPagamento");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Produto", b =>
                {
                    b.Property<int>("IdProduto")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("idProduto")
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int");

                    b.Property<string>("NomeProduto")
                        .IsRequired()
                        .HasColumnName("nomeProduto")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("QuantidadeEstoque")
                        .HasColumnName("quantidadeEstoque")
                        .HasColumnType("int");

                    b.Property<decimal?>("ValorPromocional")
                        .HasColumnName("valorPromocional")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("ValorVenda")
                        .HasColumnName("valorVenda")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdProduto")
                        .HasName("pk_produto");

                    b.HasIndex("IdEmpresa");

                    b.ToTable("Produto");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.TaxaBandeiraOperadoraCartao", b =>
                {
                    b.Property<int>("IdEmpresa")
                        .HasColumnName("idEmpresa")
                        .HasColumnType("int");

                    b.Property<int>("IdBandeiraCartao")
                        .HasColumnName("idBandeiraCartao")
                        .HasColumnType("int");

                    b.Property<int>("IdOperadoraCartao")
                        .HasColumnName("idOperadoraCartao")
                        .HasColumnType("int");

                    b.Property<decimal>("PercentualTaxaCartao")
                        .HasColumnName("percentualTaxaCartao")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("IdEmpresa", "IdBandeiraCartao", "IdOperadoraCartao")
                        .HasName("pk_taxaBandeiraOperadoraCartao");

                    b.HasIndex("IdBandeiraCartao");

                    b.HasIndex("IdOperadoraCartao");

                    b.ToTable("TaxaBandeiraOperadoraCartao");
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Cliente", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.Empresa", "Empresa")
                        .WithMany("Clientes")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("fk_cliente_empresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.ContaFinanceira", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.Banco", "Banco")
                        .WithMany("ContasFinanceiras")
                        .HasForeignKey("CodigoBanco")
                        .HasConstraintName("fk_contaFinanceira_banco")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TreinamentoLinq.Domain.Empresa", "Empresa")
                        .WithMany("ContasFinanceiras")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("fk_contaFinanceira_empresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Pedido", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.Cliente", "Cliente")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdCliente")
                        .HasConstraintName("fk_pedido_cliente")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreinamentoLinq.Domain.Empresa", "Empresa")
                        .WithMany("Pedidos")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("fk_pedido_empresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.PedidoItem", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.Pedido", "Pedido")
                        .WithMany("Items")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("fk_pedidoItem_pedido")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreinamentoLinq.Domain.Produto", "Produto")
                        .WithMany("ItemsPedido")
                        .HasForeignKey("IdProduto")
                        .HasConstraintName("fk_pedidoItem_produto")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.PedidoPagamento", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.BandeiraCartao", "BandeiraCartao")
                        .WithMany("PagamentosPedido")
                        .HasForeignKey("IdBandeira")
                        .HasConstraintName("fk_pedidoPagamento_bandeiraCartao")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TreinamentoLinq.Domain.ContaFinanceira", "ContaFinanceira")
                        .WithMany("PagamentosPedido")
                        .HasForeignKey("IdContaFinanceira")
                        .HasConstraintName("fk_pedidoPagamento_contaFinanceira")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreinamentoLinq.Domain.MeioPagamento", "MeioPagamento")
                        .WithMany("PagamentosPedido")
                        .HasForeignKey("IdMeioPagamento")
                        .HasConstraintName("fk_pedidoPagamento_meioPagamento")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreinamentoLinq.Domain.OperadoraCartao", "OperadoraCartao")
                        .WithMany("PagamentosPedido")
                        .HasForeignKey("IdOperadoraCartao")
                        .HasConstraintName("fk_pedidoPagamento_operadoraCartao")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("TreinamentoLinq.Domain.Pedido", "Pedido")
                        .WithMany("PagamentosPedido")
                        .HasForeignKey("IdPedido")
                        .HasConstraintName("fk_pedidoPagamento_pedido")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.Produto", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.Empresa", "Empresa")
                        .WithMany("Produtos")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("fk_produto_empresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("TreinamentoLinq.Domain.TaxaBandeiraOperadoraCartao", b =>
                {
                    b.HasOne("TreinamentoLinq.Domain.BandeiraCartao", "BandeiraCartao")
                        .WithMany("TaxasBandeiraOperadoraCartao")
                        .HasForeignKey("IdBandeiraCartao")
                        .HasConstraintName("fk_taxaBandeiraOperadoraCartao_bandeiraCartao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreinamentoLinq.Domain.Empresa", "Empresa")
                        .WithMany("TaxasBandeiraOperadoraCartao")
                        .HasForeignKey("IdEmpresa")
                        .HasConstraintName("fk_taxaBandeiraOperadoraCartao_empresa")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("TreinamentoLinq.Domain.OperadoraCartao", "OperadoraCartao")
                        .WithMany("TaxasBandeiraOperadoraCartao")
                        .HasForeignKey("IdOperadoraCartao")
                        .HasConstraintName("fk_taxaBandeiraOperadoraCartao_operadoraCartao")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
